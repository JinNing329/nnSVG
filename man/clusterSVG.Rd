% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clusterSVG.R
\name{clusterSVG}
\alias{clusterSVG}
\title{clusterSVG}
\usage{
clusterSVG(spe, filter_mito = TRUE)
}
\arguments{
\item{spe}{\code{SpatialExperiment} Input data, assumed to be a
\code{\link{SpatialExperiment}} object containing an assay named
\code{logcounts} containing log-transformed normalized counts, e.g. from
\code{\link{preprocessSVG}}.}

\item{filter_mito}{\code{logical} Whether to filter mitochondrial genes. 
Assumes the \code{rowData} slot of \code{spe} contains a column named 
\code{gene_name}, which can be used to identify mitochondrial genes. 
Default = TRUE. Set to FALSE to disable.}
}
\value{
Returns a \code{SpatialExperiment} object with a factor of cluster 
  labels stored in the \code{colData} slot, which can then be extracted and 
  provided to \code{\link{nnSVG}} as a matrix of covariates.
}
\description{
Clustering to identify major cell types as input for nnSVG
}
\details{
Convenience function to perform clustering to identify major cell types as
input for nnSVG. Cluster labels representing major cell types generated by
this function can be provided to \code{\link{nnSVG}} as a matrix of
covariates to include them within the statistical model. \code{nnSVG} will
then identify spatially variable genes (SVGs) after taking variation due to
major cell types into account.

Alternatively, cell types can be identified using manually guided analyses 
or a different clustering algorithm, or \code{nnSVG} can also be run without 
taking cell types into account (\code{x = NULL}). If \code{nnSVG} is run 
without taking cell types into account, the set of top SVGs will include 
marker genes of major cell types with spatially defined distributions.

The most appropriate type of analysis (i.e. whether or not to take into
account for variation due to cell types) will depend on the biological
context of your dataset.
}
\examples{
library(SpatialExperiment)
library(STexampleData)

spe <- Visium_humanDLPFC()

# set seed for scran::quickCluster() in preprocessSVG()
set.seed(123)
spe <- preprocessSVG(spe)

spe <- clusterSVG(spe)

# show results
colData(spe)

}
