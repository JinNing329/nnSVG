% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nnSVG.R
\name{nnSVG}
\alias{nnSVG}
\title{nnSVG}
\usage{
nnSVG(
  spe,
  X = NULL,
  assay_name = "binomial_deviance_residuals",
  filter_genes_ncounts = 2,
  filter_genes_pcspots = 0.5,
  filter_mito = TRUE,
  n_threads = 1,
  verbose = FALSE
)
}
\arguments{
\item{spe}{\code{SpatialExperiment}: Input data, assumed to be formatted as a
\code{SpatialExperiment} object with an \code{assay} slot containing either
deviance residuals (e.g. from the \code{scry} package) or log-transformed
normalized counts (e.g. from the \code{scran} package), and a
\code{spatialCoords} slot containing spatial coordinates of the
measurements.}

\item{X}{\code{numeric matrix}: Optional design matrix containing columns of
covariates per spatial location, e.g. known spatial domains. Number of rows
must match the number of spatial locations. Default = NULL, which fits an
intercept-only model.}

\item{assay_name}{\code{character}: Name of the \code{assay} slot in the
input object containing the preprocessed gene expression values. For
example, \code{binomial_deviance_residuals} for deviance residuals from the
\code{scry} package, or \code{logcounts} for log-transformed normalized
counts from the \code{scran} package. Default =
\code{binomial_deviance_residuals}.}

\item{filter_genes_ncounts}{\code{numeric}: Filtering parameter to filter
low-expressed genes. If values are provided, filtering will be performed to
retain genes containing at least \code{filter_genes_ncounts} expression
counts in at least \code{filter_genes_pcspots} percent of the total number
of spatial locations (spots). This also requires that the input object
contains an additional \code{assay} named \code{counts} containing raw gene
expression counts. Defaults: \code{filter_genes_ncounts} = 2,
\code{filter_genes_pcspots} = 0.5, i.e. keep genes with at least 2 counts
in at least 0.5% of spots. Set to NULL to disable filtering, e.g. if
filtering has already been performed separately.}

\item{filter_genes_pcspots}{\code{numeric}: Second filtering parameter for
low-expressed genes. See \code{filter_genes_ncounts} for details.}

\item{filter_mito}{\code{logical}: Whether to filter out mitochondrial genes,
identified by gene names starting with "MT" or "mt". This requires that the
\code{rowData} slot of the input object contains a column named
\code{gene_name}. Default = TRUE. Set to FALSE to disable, e.g. if
mitochondrial genes are of interest or have already been filtered out from
the input object.}

\item{n_threads}{\code{integer}: Number of threads for parallelization.
Default = 1.}

\item{verbose}{\code{logical}: Whether to display verbose output for model
fitting and parameter estimation from \code{BRISC}. Default = FALSE.}
}
\value{
Returns output values as additional columns in the \code{rowData}
  slot of the input object, including spatial covariance parameter estimates,
  likelihood ratio (LR) statistics, effect sizes (proportion of spatial
  covariance), p-values, and multiple testing adjusted p-values.
}
\description{
Function to run 'nnSVG' method to identify spatially variable genes (SVGs) in
spatially resolved transcriptomics (ST) data.
}
\details{
Function to run 'nnSVG' method to identify spatially variable genes (SVGs) in
spatially resolved transcriptomics (ST) data.

The 'nnSVG' method is based on nearest-neighbor Gaussian processes (Datta et
al. 2016) and uses the BRISC algorithm (Saha and Datta 2018). The method
scales linearly in the number of spatial locations, and can be applied to
datasets containing thousands or more spatial locations. For more details on
the method, see our paper.

This function runs 'nnSVG' for a full dataset. Internally, the function calls
BRISC once per gene to perform model fitting and parameter estimation, using
parallelization with one core per BRISC run. The spatial covariance parameter
estimates (sigma.sq, tau.sq, phi) are stored in 'Theta' in the BRISC output.

'nnSVG' then performs inference on the 'sigma.sq' estimates using an
approximate likelihood ratio (LR) test against a model without spatial terms,
and uses the estimated LR statistics to rank SVGs. We also calculate an
effect size, defined as the proportion of spatial variance, 'prop_sv =
sigma.sq / (sigma.sq + tau.sq)'.

LR tests are calculated using the asymptotic chi-squared distribution with 2
degrees of freedom. Multiple testing adjusted p-values are calculated using
the Benjamini-Hochberg method.

The function assumes the input is provided as a \code{SpatialExperiment}
object containing an \code{assay} slot containing either deviance residuals
(e.g. from the \code{scry} package) or log-transformed normalized counts
(e.g. from the \code{scran} package), which have been preprocessed, quality
controlled, and filtered to remove any low-quality spatial locations.

Low-expressed genes can be filtered out either manually before providing the
input to 'nnSVG', or using the filtering arguments and default values
provided here.
}
\examples{
library(SpatialExperiment)
library(STexampleData)
library(scry)

# load example dataset from STexampleData package
spe <- Visium_humanDLPFC()

# preprocessing steps

# keep only spots over tissue
spe <- spe[, colData(spe)$in_tissue == 1]

# calculate deviance residuals using scry package
spe <- nullResiduals(spe, assay = "counts", 
                     fam = "binomial", type = "deviance")

# subset small number of genes for faster runtime in this example
set.seed(123)
spe <- spe[sample(seq_len(6)), ]

# run nnSVG
# set seed for reproducibility
set.seed(123)
spe <- nnSVG(spe)

# show results
# for more details see extended example in vignette
rowData(spe)

}
