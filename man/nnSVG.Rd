% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nnSVG.R
\name{nnSVG}
\alias{nnSVG}
\title{nnSVG}
\usage{
nnSVG(
  spe,
  x = NULL,
  assay_name = c("binomial_deviance_residuals", "logcounts"),
  filter_genes = 5,
  filter_mito = TRUE,
  n_threads = 1,
  on_disk = FALSE,
  verbose = FALSE
)
}
\arguments{
\item{spe}{\code{SpatialExperiment} Input data, assumed to be a
\code{\link{SpatialExperiment}} object with \code{assay} slots containing
deviance residuals and/or log-transformed normalized counts, and spatial
coordinates stored in the \code{spatialCoords} slot.}

\item{x}{\code{numeric matrix} Optional matrix of covariates (e.g. known cell
types) per spatial coordinate. Number of rows must match the number of
spatial coordinates (columns) in the input object \code{spe}. Default =
NULL, which fits an intercept-only model.}

\item{assay_name}{\code{character} Name of assay containing preprocessed
expression values to use for clustering, i.e. either deviance residuals or
log-transformed normalized counts. Assumed to be either
\code{binomial_deviance_residuals} or \code{logcounts}. Default =
\code{binomial_deviance_residuals}.}

\item{filter_genes}{\code{integer} Whether to filter low-expressed genes. If
a value is provided, genes with at least 1 unique molecular identifier
(UMI) count in at least this percentage of spatial coordinates will be
kept. Assumes \code{spe} contains an assay named \code{counts} containing
UMI counts. Default = 5, i.e. keep genes with at least 1 UMI in 5% of
spatial coordinates. Set to NULL to disable.}

\item{filter_mito}{\code{logical} Whether to filter mitochondrial genes.
Assumes the \code{rowData} slot of \code{spe} contains a column named
\code{gene_name}, which can be used to identify mitochondrial genes.
Default = TRUE. Set to FALSE to disable.}

\item{n_threads}{\code{integer} Number of threads for parallelization.
Default = 1.}

\item{on_disk}{\code{logical} Whether to store matrix of preprocessed
expression values internally in HDF5 (on-disk) format. This significantly
reduces memory requirements but can increase runtime. Recommended for
datasets with >10,000 spatial coordinates. Default = FALSE.}

\item{verbose}{\code{logical} Whether to display verbose output from
\code{BRISC}. Default = FALSE.}
}
\value{
Returns output values (including parameter estimates, likelihood
  ratios, and adjusted p-values) in \code{rowData} in the \code{spe}
  \code{SpatialExperiment} object.
}
\description{
Run 'nnSVG' to identify spatially variable genes
}
\details{
Run 'nnSVG' method to identify spatially variable genes (SVGs) in spatially
resolved transcriptomics data.

The method is based on nearest neighbor Gaussian processes (Datta et al.
2016) and uses the BRISC algorithm (Saha and Datta 2018). The method scales
linearly in the number of spatial coordinates, and can be applied to datasets
containing thousands of spatial coordinates.

This function runs BRISC once per gene for model fitting and parameter
estimation, using parallelization for faster runtime with one core per BRISC
run. The spatial covariance parameter estimates (sigma.sq, tau.sq, phi) from
BRISC are stored in 'Theta' in the BRISC output.

nnSVG performs inference on the 'sigma.sq' estimates using an approximate
likelihood ratio test against a model without spatial terms, and uses these
likelihood ratios to rank SVGs. We also calculate an effect size, defined as
the proportion of spatial variance out of total variance, i.e. 'prop_sv =
sigma.sq / (sigma.sq + tau.sq)'.

Likelihood ratio tests are calculated using the asymptotic chi-squared
distribution with 2 degrees of freedom, and adjusted p-values using the
Benjamini-Hochberg method.

Assumes the input is provided as a \code{\link{SpatialExperiment}} object
with an \code{assay} slot containing either deviance residuals (e.g. from the
\code{scry} package) or log-transformed normalized counts (e.g. from the
\code{scran} package), and which has been filtered to remove low-quality
spatial coordinates.

Low-expressed genes can be filtered before providing the input to
\code{nnSVG()}, or using the default filtering arguments in \code{nnSVG()}.
}
\examples{
library(SpatialExperiment)
library(STexampleData)

spe <- Visium_humanDLPFC()

# set seed for reproducibility
set.seed(123)
spe <- preprocessSVG(spe)

# subset genes for faster runtime in this example
set.seed(123)
spe <- spe[sample(seq_len(10)), ]
dim(spe)

# run nnSVG
# note: gene filtering has already been performed above
spe <- nnSVG(spe, n_threads = 1)

# show results
rowData(spe)

}
